{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CustomRequest","text":"<p>CustomRequest is an effective routing plugin for MODX Revolution to map pretty but not found URLs to a MODX resource and set the request parameters by separating the URI path at the URI separators or by a regular expression.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.6+</li> <li>PHP 7.2+</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Use pretty URLs everywhere in the MODX Revolution frontend.</li> </ul>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon and the System Setting Lexicon</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The CustomRequest project was started in 2013 by Thomas Jakobi.</p> <p>Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#calendar","title":"Calendar","text":"<p>With the Date configuration you could use an calendar snippet on the  resource with the URI <code>calendar/date/</code>. The snippet on that resource would  use the request parameters <code>year</code>, <code>month</code>, <code>day</code>, <code>title</code> to identify the  event. An example URI triggering this configuration:  <code>/calendar/date/2015/09/01/eventname.html</code></p> <p>The Calendar configuration sends the request parameters <code>year</code>, <code>month</code>,  <code>day</code> to another snippet on the resource with the URI <code>calendar/</code>. Example  triggering URI: <code>/calendar/2015/09/01/</code> <sup>1</sup></p> Name Alias Path Resource URI Parameter Regular Expression Date calendar/date/ [\"year\", \"month\", \"day\", \"title\"] Calendar calendar/ [\"year\", \"month\", \"day\"]"},{"location":"examples/#gallery","title":"Gallery","text":"<p>With the Gallery configuration you could use the Gallery snippet on the  selected resource <code>Gallery Folder</code>. The Gallery snippet on that resource would  use the request parameters <code>galAlbum</code>, <code>galItem</code> to identify the gallery and  the image. An example URI triggering this configuration: <code>/gallery/01/02/</code></p> Name Alias Path Resource URI Parameter Regular Expression Gallery Gallery Folder [\"galAlbum\", \"galItem\"]"},{"location":"examples/#different-uri","title":"Different URI","text":"<p>With the Different URI configuration you could call the resource <code>Test</code>  with a complete different URI using the request parameters <code>parameter1</code>,  <code>parameter2</code>. <sup>2</sup></p> Name Alias Path Resource URI Parameter Regular Expression Different URI complete/different/uri/ Test [\"parameter1\", \"parameter2\"]"},{"location":"examples/#regular-expression","title":"Regular Expression","text":"<p>You could even use regular expressions<sup>5</sup> to set the request parameters <sup>3</sup></p> Name Alias Path Resource URI Parameter Regular Expression Expression Expression [\"string\", \"numeric\"] #(.*?)-(\\d+)#"},{"location":"examples/#pagination","title":"Pagination","text":"<p>The Alias Path field could be filled with a valid regular expression<sup>5</sup> (the  color of the grid field is changed to blue then<sup>4</sup>) and the Resource field  could stay empty. Thay way you could use one pagination configuration for all  pagination calls on the page. The first subpattern part (<code>page/</code>) of the  expression is stripped from the not found url and the remaining string is used  to identify the resource where the user is forwarded to later.</p> Name Alias Path Resource URI Parameter Regular Expression Pagination #.*?(page/)# [\"page\"] #(\\d+)#"},{"location":"examples/#system-settings","title":"System Settings","text":"<p>CustomRequest uses the following system settings in the namespace <code>customrequest</code>:</p> Key Description Default customrequest.debug Log debug information in the MODX error log No <ol> <li> <p>If you are using two or more nested aliases in your configs, the deeper alias should be defined before the narrower alias in the configs. You could drag and drop the configurations in the grid of the custom manager page.\u00a0\u21a9</p> </li> <li> <p>The Alias Path does not have to match the alias of the Resource.\u00a0\u21a9</p> </li> <li> <p>This rule does not make much sense. If you have a real world example, please ...\u00a0\u21a9</p> </li> <li> <p>The regular expression<sup>5</sup> has to be valid and it should contain delimiters \u21a9</p> </li> <li> <p>To build and check regular expressions you could i.e. use the regex101 website.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for CustomRequest in the Package Manager of your MODX installation and install it in there.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install CustomRequest.</p> <ul> <li>Download the transport package from MODX Extras (or one of the pre built transport packages in _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.</li> <li>CustomRequest should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of CustomRequest contains a config.json to build that package locally. Use this option, if you want to debug CustomRequest and/or contribute bugfixes and enhancements.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#how-it-works","title":"How it works","text":"<p>CustomRequest works as routing plugin and maps not found URLs to a MODX resource and set additional request parameters by separating the URI path at the URI separators or by a regular expression.</p> <p>As standard option the first characters of the not found URI will be compared  with the alias value of each config entry. If found, this config entry is used.  The alias path is stripped from the not found URI and the remaining string is  used to set the request parameters.</p> <p>As a second option, the alias value of a config entry could contain a valid  regular expression and the not found URI will be matched with that expression.  If matched, this config entry is used. The first subpattern part of the  expression is stripped from the found pattern and the remaining  string is used  to identify the resource where the user is forwarded to later. At least the  found pattern is removed from the not found URI and the remaining string is  used to set the request parameters.</p>"},{"location":"usage/#custom-manager-page","title":"Custom Manager Page","text":"<p>You could configure CustomRequest in a custom manager page in the extras menu.  The CustomRequest configurations could be created on that page.</p> <p>The configurations are executed in the order of the grid on this page. If there  are two configurations starting with the same alias path, the first  configuration is used. You can change the order of the configurations by  drag and drop.</p> <p>The following settings could be set in each configuration:</p> Key Description Name A name to identify this configuration. Alias Path <p>Normally the first characters of a not found URI are compared with this string. If both strings are matching, this configuration is used. If the alias path field is not set, the alias path of the selected resource in this form is used (The grid value is shown with green text then). The alias path is stripped from the not found URI and the remaining string is used to set the request parameters.</p>As a second option, this field could contain a valid regular expression<sup>1</sup> (The grid value is shown with blue text then). The regular expression has to contain delimiters. The not found URI will be matched with that expression. If matched, this config entry is used. The first subpattern part of the expression is stripped from the found pattern and the remaining string is used to identify the resource where the user is forwarded to. At least the found pattern is removed from the not found URI and the remaining string is used to set the request parameters. Resource A not found URI is forwarded to this resource, if the current configuration is used and if the alias path does not contain a regular expression. URI Parameter The request/get/post parameter keys, the divided second part of the not found URI are assigned to. If the Regular Expression field not set, the second part is divided at the URI separators <code>/</code> Regular Expression This optional regular expression<sup>1</sup> is used to divide the second parts of the not found URI. The regular expression has to contain delimiters. The search results are assigned to the request parameters in the order of occurrence. <ol> <li> <p>To build and check regular expressions you could i.e. use the regex101 website. Please use the code generator, since this generator creates the regular expression with delimiters.\u00a0\u21a9\u21a9</p> </li> </ol>"}]}