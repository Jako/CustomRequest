{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CustomRequest CustomRequest is an effective routing plugin for MODX Revolution to map pretty but not found URLs to a MODX resource and set the request parameters by separating the URI path at the URI separators or by a regular expression. Requirements MODX Revolution 2.4+ PHP v5.4+ Features Use pretty URLs everywhere in the MODX Revolution frontend.","title":"Description"},{"location":"#customrequest","text":"CustomRequest is an effective routing plugin for MODX Revolution to map pretty but not found URLs to a MODX resource and set the request parameters by separating the URI path at the URI separators or by a regular expression.","title":"CustomRequest"},{"location":"#requirements","text":"MODX Revolution 2.4+ PHP v5.4+","title":"Requirements"},{"location":"#features","text":"Use pretty URLs everywhere in the MODX Revolution frontend.","title":"Features"},{"location":"contributors/","text":"The CustomRequest project was started in 2013 by Thomas Jakobi . Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.","title":"Contributors"},{"location":"donate/","text":"Support CustomRequest CustomRequest is and always will be free and open-source, but it still requires many man-hours of development, bug-fixing, support in MODX forums and on GitHub between the releases. Please support the ongoing and past development of CustomRequest by making a donation below. CustomRequest development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.","title":"Donate"},{"location":"donate/#support-customrequest","text":"CustomRequest is and always will be free and open-source, but it still requires many man-hours of development, bug-fixing, support in MODX forums and on GitHub between the releases. Please support the ongoing and past development of CustomRequest by making a donation below. CustomRequest development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.","title":"Support CustomRequest"},{"location":"examples/","text":"Calendar With the Date configuration you could use an calendar snippet on the resource with the URI calendar/date/ . The snippet on that resource would use the request parameters year , month , day , title to identify the event. An example URI triggering this configuration: /calendar/date/2015/09/01/eventname.html The Calendar configuration sends the request parameters year , month , day to another snippet on the resource with the URI calendar/ . Example triggering URI: /calendar/2015/09/01/ 1 Name Alias Path Resource URI Parameter Regular Expression Date calendar/date/ [\"year\", \"month\", \"day\", \"title\"] Calendar calendar/ [\"year\", \"month\", \"day\"] Gallery With the Gallery configuration you could use the Gallery snippet on the selected resource Gallery Folder . The Gallery snippet on that resource would use the request parameters galAlbum , galItem to identify the gallery and the image. An example URI triggering this configuration: /gallery/01/02/ Name Alias Path Resource URI Parameter Regular Expression Gallery Gallery Folder [\"galAlbum\", \"galItem\"] Different URI With the Different URI configuration you could call the resource Test with a complete different URI using the request parameters parameter1 , parameter2 . 2 Name Alias Path Resource URI Parameter Regular Expression Different URI complete/different/uri/ Test [\"parameter1\", \"parameter2\"] Regular Expression You could even use regular expressions 5 to set the request parameters 3 Name Alias Path Resource URI Parameter Regular Expression Expression Expression [\"string\", \"numeric\"] #(.*?)-(\\d+)# Pagination The Alias Path field could be filled with a valid regular expression 5 (the color of the grid field is changed to blue then 4 ) and the Resource field could stay empty. Thay way you could use one pagination configuration for all pagination calls on the page. The first subpattern part ( page/ ) of the expression is stripped from the not found url and the remaining string is used to identify the resource where the user is forwarded to later. Name Alias Path Resource URI Parameter Regular Expression Pagination #.*?(page/)# [\"page\"] #(\\d+)# System Settings CustomRequest uses the following system settings in the namespace customrequest : Key Description Default customrequest.debug Log debug information in the MODX error log No If you are using two or more nested aliases in your configs, the deeper alias should be defined before the narrower alias in the configs. You could drag and drop the configurations in the grid of the custom manager page. \u21a9 The Alias Path does not have to match the alias of the Resource. \u21a9 This rule does not make much sense. If you have a real world example, please ... \u21a9 The regular expression 5 has to be valid and it should contain delimiters \u21a9 To build and check regular expressions you could i.e. use the regex101 website. \u21a9 \u21a9 \u21a9","title":"Examples"},{"location":"examples/#calendar","text":"With the Date configuration you could use an calendar snippet on the resource with the URI calendar/date/ . The snippet on that resource would use the request parameters year , month , day , title to identify the event. An example URI triggering this configuration: /calendar/date/2015/09/01/eventname.html The Calendar configuration sends the request parameters year , month , day to another snippet on the resource with the URI calendar/ . Example triggering URI: /calendar/2015/09/01/ 1 Name Alias Path Resource URI Parameter Regular Expression Date calendar/date/ [\"year\", \"month\", \"day\", \"title\"] Calendar calendar/ [\"year\", \"month\", \"day\"]","title":"Calendar"},{"location":"examples/#gallery","text":"With the Gallery configuration you could use the Gallery snippet on the selected resource Gallery Folder . The Gallery snippet on that resource would use the request parameters galAlbum , galItem to identify the gallery and the image. An example URI triggering this configuration: /gallery/01/02/ Name Alias Path Resource URI Parameter Regular Expression Gallery Gallery Folder [\"galAlbum\", \"galItem\"]","title":"Gallery"},{"location":"examples/#different-uri","text":"With the Different URI configuration you could call the resource Test with a complete different URI using the request parameters parameter1 , parameter2 . 2 Name Alias Path Resource URI Parameter Regular Expression Different URI complete/different/uri/ Test [\"parameter1\", \"parameter2\"]","title":"Different URI"},{"location":"examples/#regular-expression","text":"You could even use regular expressions 5 to set the request parameters 3 Name Alias Path Resource URI Parameter Regular Expression Expression Expression [\"string\", \"numeric\"] #(.*?)-(\\d+)#","title":"Regular Expression"},{"location":"examples/#pagination","text":"The Alias Path field could be filled with a valid regular expression 5 (the color of the grid field is changed to blue then 4 ) and the Resource field could stay empty. Thay way you could use one pagination configuration for all pagination calls on the page. The first subpattern part ( page/ ) of the expression is stripped from the not found url and the remaining string is used to identify the resource where the user is forwarded to later. Name Alias Path Resource URI Parameter Regular Expression Pagination #.*?(page/)# [\"page\"] #(\\d+)#","title":"Pagination"},{"location":"examples/#system-settings","text":"CustomRequest uses the following system settings in the namespace customrequest : Key Description Default customrequest.debug Log debug information in the MODX error log No If you are using two or more nested aliases in your configs, the deeper alias should be defined before the narrower alias in the configs. You could drag and drop the configurations in the grid of the custom manager page. \u21a9 The Alias Path does not have to match the alias of the Resource. \u21a9 This rule does not make much sense. If you have a real world example, please ... \u21a9 The regular expression 5 has to be valid and it should contain delimiters \u21a9 To build and check regular expressions you could i.e. use the regex101 website. \u21a9 \u21a9 \u21a9","title":"System Settings"},{"location":"installation/","text":"Install from MODX Extras Search for CustomRequest in the Package Manager of your MODX installation and install it in there. Manual installation If you can't access the MODX Extras Repository in your MODX installation, you can manually install CustomRequest. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. CustomRequest should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation. Build it from source To build and install the package from source you could use Git Package Management . The GitHub repository of CustomRequest contains a config.json to build that package locally. Use this option, if you want to debug CustomRequest and/or contribute bugfixes and enhancements.","title":"Installation"},{"location":"installation/#install-from-modx-extras","text":"Search for CustomRequest in the Package Manager of your MODX installation and install it in there.","title":"Install from MODX Extras"},{"location":"installation/#manual-installation","text":"If you can't access the MODX Extras Repository in your MODX installation, you can manually install CustomRequest. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. CustomRequest should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.","title":"Manual installation"},{"location":"installation/#build-it-from-source","text":"To build and install the package from source you could use Git Package Management . The GitHub repository of CustomRequest contains a config.json to build that package locally. Use this option, if you want to debug CustomRequest and/or contribute bugfixes and enhancements.","title":"Build it from source"},{"location":"usage/","text":"How it works CustomRequest works as routing plugin and maps not found URLs to a MODX resource and set additional request parameters by separating the URI path at the URI separators or by a regular expression. As standard option the first characters of the not found URI will be compared with the alias value of each config entry. If found, this config entry is used. The alias path is stripped from the not found URI and the remaining string is used to set the request parameters. As a second option, the alias value of a config entry could contain a valid regular expression and the not found URI will be matched with that expression. If matched, this config entry is used. The first subpattern part of the expression is stripped from the found pattern and the remaining string is used to identify the resource where the user is forwarded to later. At least the found pattern is removed from the not found URI and the remaining string is used to set the request parameters. Custom Manager Page You could configure CustomRequest in a custom manager page in the extras menu. The CustomRequest configurations could be created on that page. The configurations are executed in the order of the grid on this page. If there are two configurations starting with the same alias path, the first configuration is used. You can change the order of the configurations by drag and drop. The following settings could be set in each configuration: Key Description Name A name to identify this configuration. Alias Path Normally the first characters of a not found URI are compared with this string. If both strings are matching, this configuration is used. If the alias path field is not set, the alias path of the selected resource in this form is used (The grid value is shown with green text then) . The alias path is stripped from the not found URI and the remaining string is used to set the request parameters. As a second option, this field could contain a valid regular expression 1 (The grid value is shown with blue text then) . The regular expression has to contain delimiters . The not found URI will be matched with that expression. If matched, this config entry is used. The first subpattern part of the expression is stripped from the found pattern and the remaining string is used to identify the resource where the user is forwarded to. At least the found pattern is removed from the not found URI and the remaining string is used to set the request parameters. Resource A not found URI is forwarded to this resource, if the current configuration is used and if the alias path does not contain a regular expression. URI Parameter The request/get/post parameter keys, the divided second part of the not found URI are assigned to. If the Regular Expression field not set, the second part is divided at the URI separators / Regular Expression This optional regular expression 1 is used to divide the second parts of the not found URI. The regular expression has to contain delimiters . The search results are assigned to the request parameters in the order of occurrence. To build and check regular expressions you could i.e. use the regex101 website. \u21a9 \u21a9","title":"Usage"},{"location":"usage/#how-it-works","text":"CustomRequest works as routing plugin and maps not found URLs to a MODX resource and set additional request parameters by separating the URI path at the URI separators or by a regular expression. As standard option the first characters of the not found URI will be compared with the alias value of each config entry. If found, this config entry is used. The alias path is stripped from the not found URI and the remaining string is used to set the request parameters. As a second option, the alias value of a config entry could contain a valid regular expression and the not found URI will be matched with that expression. If matched, this config entry is used. The first subpattern part of the expression is stripped from the found pattern and the remaining string is used to identify the resource where the user is forwarded to later. At least the found pattern is removed from the not found URI and the remaining string is used to set the request parameters.","title":"How it works"},{"location":"usage/#custom-manager-page","text":"You could configure CustomRequest in a custom manager page in the extras menu. The CustomRequest configurations could be created on that page. The configurations are executed in the order of the grid on this page. If there are two configurations starting with the same alias path, the first configuration is used. You can change the order of the configurations by drag and drop. The following settings could be set in each configuration: Key Description Name A name to identify this configuration. Alias Path Normally the first characters of a not found URI are compared with this string. If both strings are matching, this configuration is used. If the alias path field is not set, the alias path of the selected resource in this form is used (The grid value is shown with green text then) . The alias path is stripped from the not found URI and the remaining string is used to set the request parameters. As a second option, this field could contain a valid regular expression 1 (The grid value is shown with blue text then) . The regular expression has to contain delimiters . The not found URI will be matched with that expression. If matched, this config entry is used. The first subpattern part of the expression is stripped from the found pattern and the remaining string is used to identify the resource where the user is forwarded to. At least the found pattern is removed from the not found URI and the remaining string is used to set the request parameters. Resource A not found URI is forwarded to this resource, if the current configuration is used and if the alias path does not contain a regular expression. URI Parameter The request/get/post parameter keys, the divided second part of the not found URI are assigned to. If the Regular Expression field not set, the second part is divided at the URI separators / Regular Expression This optional regular expression 1 is used to divide the second parts of the not found URI. The regular expression has to contain delimiters . The search results are assigned to the request parameters in the order of occurrence. To build and check regular expressions you could i.e. use the regex101 website. \u21a9 \u21a9","title":"Custom Manager Page"}]}